name: Deploy to EC2

on:
  push:
    branches:
      - main  # 또는 배포하고자 하는 브랜치

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          
      - name: Install dependencies
        run: poetry install
        
      - name: Run tests
        run: |
          poetry run python manage.py test

  deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}  # Optional: if using IAM roles
          role-session-name: GitHubActions  # Optional: descriptive session name

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/sportify:${{ github.sha }},${{ secrets.DOCKER_HUB_USERNAME }}/sportify:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 배포 디렉토리로 이동
            cd ~/sportify
            
            # 이전 배포 백업
            if [ -f docker-compose.yml ]; then
              docker-compose down
              docker system prune -f
            fi
            
            # 최신 코드 가져오기
            git pull origin main
            
            # 필요한 디렉토리 생성
            mkdir -p /var/www/certbot
            mkdir -p ./certbot/conf
            mkdir -p ./certbot/www
            mkdir -p ./nginx/conf.d
            
            # 환경 변수 파일 생성
            cat << EOF > .env
            DEBUG=${{ secrets.DEBUG }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}
            EOF
            
            # SSL 설정 스크립트 실행 권한 부여
            chmod +x init-letsencrypt.sh
            
            # 도커 컴포즈로 서비스 시작
            docker-compose pull
            docker-compose up -d
            
            # 데이터베이스 마이그레이션
            docker-compose exec -T web poetry run python manage.py migrate
            
            # SSL 인증서 발급 (도메인이 있는 경우)
            if [ "${{ secrets.DOMAIN }}" != "" ]; then
              ./init-letsencrypt.sh
            fi
            
            # 서비스 상태 확인
            docker-compose ps