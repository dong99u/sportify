name: Deploy to EC2

on:
  push:
    branches: [ "develop" ]
  pull_request:
    types:
      - closed
    branches:
      - develop

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: sportify
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USERNAME: ubuntu

jobs:
  deploy:
    if: github.event.pull_request.merged == true || github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Build Docker image
      run: |
        docker build -t ${{ env.ECR_REPOSITORY }}:${{ github.sha }} .
        docker tag ${{ env.ECR_REPOSITORY }}:${{ github.sha }} ${{ env.ECR_REPOSITORY }}:latest

    # SSH 키 설정
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        
    # SSH 연결 테스트
    - name: Test SSH Connection
      run: ssh -v -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ env.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'echo "Connected successfully"'
    
    # 배포
    - name: Deploy to EC2
      run: |
        # docker-compose.yml 파일 전송
        scp -i ~/.ssh/id_rsa docker-compose.yml ${{ env.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/home/ubuntu/sportify/
        
        # 배포 명령 실행
        ssh -i ~/.ssh/id_rsa ${{ env.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
          cd /home/ubuntu/sportify
          docker-compose pull
          docker-compose up -d
        '